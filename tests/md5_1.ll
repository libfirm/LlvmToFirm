; ModuleID = 'md5.c'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32"
target triple = "i386-unknown-linux-gnu"

%struct.FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct.FILE*, i32, i32, i32, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i32, i32, [40 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct.FILE*, i32 }
%struct.md5_ctx = type { i32, i32, i32, i32, [2 x i32], i32, [32 x i32] }

@fillbuf = internal constant [64 x i8] c"\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 32 ; <[64 x i8]*> [#uses=1]
@.str = private constant [7 x i8] c"%1000s\00", align 1 ; <[7 x i8]*> [#uses=1]
@.str1 = private constant [5 x i8] c"%02x\00", align 1 ; <[5 x i8]*> [#uses=1]

define void @md5_init_ctx(%struct.md5_ctx* nocapture %ctx) nounwind {
entry:
  %0 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 0 ; <i32*> [#uses=1]
  store i32 1732584193, i32* %0, align 4
  %1 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 1 ; <i32*> [#uses=1]
  store i32 -271733879, i32* %1, align 4
  %2 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 2 ; <i32*> [#uses=1]
  store i32 -1732584194, i32* %2, align 4
  %3 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 3 ; <i32*> [#uses=1]
  store i32 271733878, i32* %3, align 4
  %4 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 1 ; <i32*> [#uses=1]
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 0 ; <i32*> [#uses=1]
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 5 ; <i32*> [#uses=1]
  store i32 0, i32* %6, align 4
  ret void
}

define void @md5_process_block(i8* %buffer, i32 %len, %struct.md5_ctx* nocapture %ctx) nounwind {
entry:
  %0 = bitcast i8* %buffer to i32*                ; <i32*> [#uses=2]
  %1 = lshr i32 %len, 2                           ; <i32> [#uses=1]
  %2 = getelementptr inbounds i32* %0, i32 %1     ; <i32*> [#uses=2]
  %3 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 0 ; <i32*> [#uses=2]
  %4 = load i32* %3, align 4                      ; <i32> [#uses=2]
  %5 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 1 ; <i32*> [#uses=2]
  %6 = load i32* %5, align 4                      ; <i32> [#uses=2]
  %7 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 2 ; <i32*> [#uses=2]
  %8 = load i32* %7, align 4                      ; <i32> [#uses=2]
  %9 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 3 ; <i32*> [#uses=2]
  %10 = load i32* %9, align 4                     ; <i32> [#uses=2]
  %11 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 0 ; <i32*> [#uses=2]
  %12 = load i32* %11, align 4                    ; <i32> [#uses=1]
  %13 = add i32 %12, %len                         ; <i32> [#uses=2]
  store i32 %13, i32* %11, align 4
  %14 = icmp ult i32 %13, %len                    ; <i1> [#uses=1]
  br i1 %14, label %bb, label %bb34.preheader

bb:                                               ; preds = %entry
  %15 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 1 ; <i32*> [#uses=2]
  %16 = load i32* %15, align 4                    ; <i32> [#uses=1]
  %17 = add i32 %16, 1                            ; <i32> [#uses=1]
  store i32 %17, i32* %15, align 4
  br label %bb34.preheader

bb34.preheader:                                   ; preds = %entry, %bb
  %18 = icmp ult i32* %0, %2                      ; <i1> [#uses=1]
  br i1 %18, label %bb1, label %bb35

bb1:                                              ; preds = %bb1, %bb34.preheader
  %indvar = phi i32 [ 0, %bb34.preheader ], [ %indvar.next, %bb1 ] ; <i32> [#uses=2]
  %A.039 = phi i32 [ %4, %bb34.preheader ], [ %641, %bb1 ] ; <i32> [#uses=2]
  %B.038 = phi i32 [ %6, %bb34.preheader ], [ %643, %bb1 ] ; <i32> [#uses=7]
  %C.037 = phi i32 [ %8, %bb34.preheader ], [ %644, %bb1 ] ; <i32> [#uses=5]
  %D.036 = phi i32 [ %10, %bb34.preheader ], [ %645, %bb1 ] ; <i32> [#uses=4]
  %tmp = shl i32 %indvar, 6                       ; <i32> [#uses=17]
  %scevgep = getelementptr i8* %buffer, i32 %tmp  ; <i8*> [#uses=1]
  %words.040 = bitcast i8* %scevgep to i32*       ; <i32*> [#uses=1]
  %tmp49111 = or i32 %tmp, 4                      ; <i32> [#uses=1]
  %scevgep50 = getelementptr i8* %buffer, i32 %tmp49111 ; <i8*> [#uses=1]
  %scevgep5051 = bitcast i8* %scevgep50 to i32*   ; <i32*> [#uses=1]
  %tmp52110 = or i32 %tmp, 8                      ; <i32> [#uses=1]
  %scevgep53 = getelementptr i8* %buffer, i32 %tmp52110 ; <i8*> [#uses=1]
  %scevgep5354 = bitcast i8* %scevgep53 to i32*   ; <i32*> [#uses=1]
  %tmp55109 = or i32 %tmp, 12                     ; <i32> [#uses=1]
  %scevgep56 = getelementptr i8* %buffer, i32 %tmp55109 ; <i8*> [#uses=1]
  %scevgep5657 = bitcast i8* %scevgep56 to i32*   ; <i32*> [#uses=1]
  %tmp58108 = or i32 %tmp, 16                     ; <i32> [#uses=1]
  %scevgep59 = getelementptr i8* %buffer, i32 %tmp58108 ; <i8*> [#uses=1]
  %scevgep5960 = bitcast i8* %scevgep59 to i32*   ; <i32*> [#uses=1]
  %tmp61107 = or i32 %tmp, 20                     ; <i32> [#uses=1]
  %scevgep62 = getelementptr i8* %buffer, i32 %tmp61107 ; <i8*> [#uses=1]
  %scevgep6263 = bitcast i8* %scevgep62 to i32*   ; <i32*> [#uses=1]
  %tmp64106 = or i32 %tmp, 24                     ; <i32> [#uses=1]
  %scevgep65 = getelementptr i8* %buffer, i32 %tmp64106 ; <i8*> [#uses=1]
  %scevgep6566 = bitcast i8* %scevgep65 to i32*   ; <i32*> [#uses=1]
  %tmp67105 = or i32 %tmp, 28                     ; <i32> [#uses=1]
  %scevgep68 = getelementptr i8* %buffer, i32 %tmp67105 ; <i8*> [#uses=1]
  %scevgep6869 = bitcast i8* %scevgep68 to i32*   ; <i32*> [#uses=1]
  %tmp70104 = or i32 %tmp, 32                     ; <i32> [#uses=1]
  %scevgep71 = getelementptr i8* %buffer, i32 %tmp70104 ; <i8*> [#uses=1]
  %scevgep7172 = bitcast i8* %scevgep71 to i32*   ; <i32*> [#uses=1]
  %tmp73103 = or i32 %tmp, 36                     ; <i32> [#uses=1]
  %scevgep74 = getelementptr i8* %buffer, i32 %tmp73103 ; <i8*> [#uses=1]
  %scevgep7475 = bitcast i8* %scevgep74 to i32*   ; <i32*> [#uses=1]
  %tmp76102 = or i32 %tmp, 40                     ; <i32> [#uses=1]
  %scevgep77 = getelementptr i8* %buffer, i32 %tmp76102 ; <i8*> [#uses=1]
  %scevgep7778 = bitcast i8* %scevgep77 to i32*   ; <i32*> [#uses=1]
  %tmp79101 = or i32 %tmp, 44                     ; <i32> [#uses=1]
  %scevgep80 = getelementptr i8* %buffer, i32 %tmp79101 ; <i8*> [#uses=1]
  %scevgep8081 = bitcast i8* %scevgep80 to i32*   ; <i32*> [#uses=1]
  %tmp82100 = or i32 %tmp, 48                     ; <i32> [#uses=1]
  %scevgep83 = getelementptr i8* %buffer, i32 %tmp82100 ; <i8*> [#uses=1]
  %scevgep8384 = bitcast i8* %scevgep83 to i32*   ; <i32*> [#uses=1]
  %tmp8599 = or i32 %tmp, 52                      ; <i32> [#uses=1]
  %scevgep86 = getelementptr i8* %buffer, i32 %tmp8599 ; <i8*> [#uses=1]
  %scevgep8687 = bitcast i8* %scevgep86 to i32*   ; <i32*> [#uses=1]
  %tmp8898 = or i32 %tmp, 56                      ; <i32> [#uses=1]
  %scevgep89 = getelementptr i8* %buffer, i32 %tmp8898 ; <i8*> [#uses=1]
  %scevgep8990 = bitcast i8* %scevgep89 to i32*   ; <i32*> [#uses=1]
  %tmp9197 = or i32 %tmp, 60                      ; <i32> [#uses=1]
  %scevgep92 = getelementptr i8* %buffer, i32 %tmp9197 ; <i8*> [#uses=1]
  %scevgep9293 = bitcast i8* %scevgep92 to i32*   ; <i32*> [#uses=1]
  %19 = xor i32 %C.037, %D.036                    ; <i32> [#uses=1]
  %20 = and i32 %19, %B.038                       ; <i32> [#uses=1]
  %21 = xor i32 %20, %D.036                       ; <i32> [#uses=1]
  %22 = load i32* %words.040, align 4             ; <i32> [#uses=4]
  %23 = add i32 %A.039, -680876936                ; <i32> [#uses=1]
  %24 = add i32 %23, %21                          ; <i32> [#uses=1]
  %25 = add i32 %24, %22                          ; <i32> [#uses=2]
  %26 = lshr i32 %25, 25                          ; <i32> [#uses=1]
  %27 = shl i32 %25, 7                            ; <i32> [#uses=1]
  %28 = or i32 %26, %27                           ; <i32> [#uses=1]
  %29 = add i32 %28, %B.038                       ; <i32> [#uses=6]
  %30 = xor i32 %B.038, %C.037                    ; <i32> [#uses=1]
  %31 = and i32 %29, %30                          ; <i32> [#uses=1]
  %32 = xor i32 %31, %C.037                       ; <i32> [#uses=1]
  %33 = load i32* %scevgep5051, align 4           ; <i32> [#uses=4]
  %34 = add i32 %D.036, -389564586                ; <i32> [#uses=1]
  %35 = add i32 %34, %33                          ; <i32> [#uses=1]
  %36 = add i32 %35, %32                          ; <i32> [#uses=2]
  %37 = lshr i32 %36, 20                          ; <i32> [#uses=1]
  %38 = shl i32 %36, 12                           ; <i32> [#uses=1]
  %39 = or i32 %37, %38                           ; <i32> [#uses=1]
  %40 = add i32 %39, %29                          ; <i32> [#uses=6]
  %41 = xor i32 %29, %B.038                       ; <i32> [#uses=1]
  %42 = and i32 %40, %41                          ; <i32> [#uses=1]
  %43 = xor i32 %42, %B.038                       ; <i32> [#uses=1]
  %44 = load i32* %scevgep5354, align 4           ; <i32> [#uses=4]
  %45 = add i32 %C.037, 606105819                 ; <i32> [#uses=1]
  %46 = add i32 %45, %44                          ; <i32> [#uses=1]
  %47 = add i32 %46, %43                          ; <i32> [#uses=2]
  %48 = lshr i32 %47, 15                          ; <i32> [#uses=1]
  %49 = shl i32 %47, 17                           ; <i32> [#uses=1]
  %50 = or i32 %48, %49                           ; <i32> [#uses=1]
  %51 = add i32 %50, %40                          ; <i32> [#uses=6]
  %52 = xor i32 %40, %29                          ; <i32> [#uses=1]
  %53 = and i32 %51, %52                          ; <i32> [#uses=1]
  %54 = xor i32 %53, %29                          ; <i32> [#uses=1]
  %55 = load i32* %scevgep5657, align 4           ; <i32> [#uses=4]
  %56 = add i32 %B.038, -1044525330               ; <i32> [#uses=1]
  %57 = add i32 %56, %55                          ; <i32> [#uses=1]
  %58 = add i32 %57, %54                          ; <i32> [#uses=2]
  %59 = lshr i32 %58, 10                          ; <i32> [#uses=1]
  %60 = shl i32 %58, 22                           ; <i32> [#uses=1]
  %61 = or i32 %59, %60                           ; <i32> [#uses=1]
  %62 = add i32 %61, %51                          ; <i32> [#uses=6]
  %63 = xor i32 %51, %40                          ; <i32> [#uses=1]
  %64 = and i32 %62, %63                          ; <i32> [#uses=1]
  %65 = xor i32 %64, %40                          ; <i32> [#uses=1]
  %66 = load i32* %scevgep5960, align 4           ; <i32> [#uses=4]
  %67 = add i32 %29, -176418897                   ; <i32> [#uses=1]
  %68 = add i32 %67, %66                          ; <i32> [#uses=1]
  %69 = add i32 %68, %65                          ; <i32> [#uses=2]
  %70 = lshr i32 %69, 25                          ; <i32> [#uses=1]
  %71 = shl i32 %69, 7                            ; <i32> [#uses=1]
  %72 = or i32 %70, %71                           ; <i32> [#uses=1]
  %73 = add i32 %72, %62                          ; <i32> [#uses=6]
  %74 = xor i32 %62, %51                          ; <i32> [#uses=1]
  %75 = and i32 %73, %74                          ; <i32> [#uses=1]
  %76 = xor i32 %75, %51                          ; <i32> [#uses=1]
  %77 = load i32* %scevgep6263, align 4           ; <i32> [#uses=4]
  %78 = add i32 %77, 1200080426                   ; <i32> [#uses=1]
  %79 = add i32 %78, %40                          ; <i32> [#uses=1]
  %80 = add i32 %79, %76                          ; <i32> [#uses=2]
  %81 = lshr i32 %80, 20                          ; <i32> [#uses=1]
  %82 = shl i32 %80, 12                           ; <i32> [#uses=1]
  %83 = or i32 %81, %82                           ; <i32> [#uses=1]
  %84 = add i32 %83, %73                          ; <i32> [#uses=6]
  %85 = xor i32 %73, %62                          ; <i32> [#uses=1]
  %86 = and i32 %84, %85                          ; <i32> [#uses=1]
  %87 = xor i32 %86, %62                          ; <i32> [#uses=1]
  %88 = load i32* %scevgep6566, align 4           ; <i32> [#uses=4]
  %89 = add i32 %88, -1473231341                  ; <i32> [#uses=1]
  %90 = add i32 %89, %51                          ; <i32> [#uses=1]
  %91 = add i32 %90, %87                          ; <i32> [#uses=2]
  %92 = lshr i32 %91, 15                          ; <i32> [#uses=1]
  %93 = shl i32 %91, 17                           ; <i32> [#uses=1]
  %94 = or i32 %92, %93                           ; <i32> [#uses=1]
  %95 = add i32 %94, %84                          ; <i32> [#uses=6]
  %96 = xor i32 %84, %73                          ; <i32> [#uses=1]
  %97 = and i32 %95, %96                          ; <i32> [#uses=1]
  %98 = xor i32 %97, %73                          ; <i32> [#uses=1]
  %99 = load i32* %scevgep6869, align 4           ; <i32> [#uses=4]
  %100 = add i32 %99, -45705983                   ; <i32> [#uses=1]
  %101 = add i32 %100, %62                        ; <i32> [#uses=1]
  %102 = add i32 %101, %98                        ; <i32> [#uses=2]
  %103 = lshr i32 %102, 10                        ; <i32> [#uses=1]
  %104 = shl i32 %102, 22                         ; <i32> [#uses=1]
  %105 = or i32 %103, %104                        ; <i32> [#uses=1]
  %106 = add i32 %105, %95                        ; <i32> [#uses=6]
  %107 = xor i32 %95, %84                         ; <i32> [#uses=1]
  %108 = and i32 %106, %107                       ; <i32> [#uses=1]
  %109 = xor i32 %108, %84                        ; <i32> [#uses=1]
  %110 = load i32* %scevgep7172, align 4          ; <i32> [#uses=4]
  %111 = add i32 %110, 1770035416                 ; <i32> [#uses=1]
  %112 = add i32 %111, %73                        ; <i32> [#uses=1]
  %113 = add i32 %112, %109                       ; <i32> [#uses=2]
  %114 = lshr i32 %113, 25                        ; <i32> [#uses=1]
  %115 = shl i32 %113, 7                          ; <i32> [#uses=1]
  %116 = or i32 %114, %115                        ; <i32> [#uses=1]
  %117 = add i32 %116, %106                       ; <i32> [#uses=6]
  %118 = xor i32 %106, %95                        ; <i32> [#uses=1]
  %119 = and i32 %117, %118                       ; <i32> [#uses=1]
  %120 = xor i32 %119, %95                        ; <i32> [#uses=1]
  %121 = load i32* %scevgep7475, align 4          ; <i32> [#uses=4]
  %122 = add i32 %121, -1958414417                ; <i32> [#uses=1]
  %123 = add i32 %122, %84                        ; <i32> [#uses=1]
  %124 = add i32 %123, %120                       ; <i32> [#uses=2]
  %125 = lshr i32 %124, 20                        ; <i32> [#uses=1]
  %126 = shl i32 %124, 12                         ; <i32> [#uses=1]
  %127 = or i32 %125, %126                        ; <i32> [#uses=1]
  %128 = add i32 %127, %117                       ; <i32> [#uses=6]
  %129 = xor i32 %117, %106                       ; <i32> [#uses=1]
  %130 = and i32 %128, %129                       ; <i32> [#uses=1]
  %131 = xor i32 %130, %106                       ; <i32> [#uses=1]
  %132 = load i32* %scevgep7778, align 4          ; <i32> [#uses=4]
  %133 = add i32 %132, -42063                     ; <i32> [#uses=1]
  %134 = add i32 %133, %95                        ; <i32> [#uses=1]
  %135 = add i32 %134, %131                       ; <i32> [#uses=2]
  %136 = lshr i32 %135, 15                        ; <i32> [#uses=1]
  %137 = shl i32 %135, 17                         ; <i32> [#uses=1]
  %138 = or i32 %136, %137                        ; <i32> [#uses=1]
  %139 = add i32 %138, %128                       ; <i32> [#uses=6]
  %140 = xor i32 %128, %117                       ; <i32> [#uses=1]
  %141 = and i32 %139, %140                       ; <i32> [#uses=1]
  %142 = xor i32 %141, %117                       ; <i32> [#uses=1]
  %143 = load i32* %scevgep8081, align 4          ; <i32> [#uses=4]
  %144 = add i32 %143, -1990404162                ; <i32> [#uses=1]
  %145 = add i32 %144, %106                       ; <i32> [#uses=1]
  %146 = add i32 %145, %142                       ; <i32> [#uses=2]
  %147 = lshr i32 %146, 10                        ; <i32> [#uses=1]
  %148 = shl i32 %146, 22                         ; <i32> [#uses=1]
  %149 = or i32 %147, %148                        ; <i32> [#uses=1]
  %150 = add i32 %149, %139                       ; <i32> [#uses=6]
  %151 = xor i32 %139, %128                       ; <i32> [#uses=1]
  %152 = and i32 %150, %151                       ; <i32> [#uses=1]
  %153 = xor i32 %152, %128                       ; <i32> [#uses=1]
  %154 = load i32* %scevgep8384, align 4          ; <i32> [#uses=4]
  %155 = add i32 %154, 1804603682                 ; <i32> [#uses=1]
  %156 = add i32 %155, %117                       ; <i32> [#uses=1]
  %157 = add i32 %156, %153                       ; <i32> [#uses=2]
  %158 = lshr i32 %157, 25                        ; <i32> [#uses=1]
  %159 = shl i32 %157, 7                          ; <i32> [#uses=1]
  %160 = or i32 %158, %159                        ; <i32> [#uses=1]
  %161 = add i32 %160, %150                       ; <i32> [#uses=6]
  %162 = xor i32 %150, %139                       ; <i32> [#uses=1]
  %163 = and i32 %161, %162                       ; <i32> [#uses=1]
  %164 = xor i32 %163, %139                       ; <i32> [#uses=1]
  %165 = load i32* %scevgep8687, align 4          ; <i32> [#uses=4]
  %166 = add i32 %165, -40341101                  ; <i32> [#uses=1]
  %167 = add i32 %166, %128                       ; <i32> [#uses=1]
  %168 = add i32 %167, %164                       ; <i32> [#uses=2]
  %169 = lshr i32 %168, 20                        ; <i32> [#uses=1]
  %170 = shl i32 %168, 12                         ; <i32> [#uses=1]
  %171 = or i32 %169, %170                        ; <i32> [#uses=1]
  %172 = add i32 %171, %161                       ; <i32> [#uses=5]
  %173 = xor i32 %161, %150                       ; <i32> [#uses=1]
  %174 = and i32 %172, %173                       ; <i32> [#uses=1]
  %175 = xor i32 %174, %150                       ; <i32> [#uses=1]
  %176 = load i32* %scevgep8990, align 4          ; <i32> [#uses=4]
  %177 = add i32 %176, -1502002290                ; <i32> [#uses=1]
  %178 = add i32 %177, %139                       ; <i32> [#uses=1]
  %179 = add i32 %178, %175                       ; <i32> [#uses=2]
  %180 = lshr i32 %179, 15                        ; <i32> [#uses=1]
  %181 = shl i32 %179, 17                         ; <i32> [#uses=1]
  %182 = or i32 %180, %181                        ; <i32> [#uses=1]
  %183 = add i32 %182, %172                       ; <i32> [#uses=6]
  %184 = xor i32 %172, %161                       ; <i32> [#uses=1]
  %185 = and i32 %183, %184                       ; <i32> [#uses=1]
  %186 = xor i32 %185, %161                       ; <i32> [#uses=1]
  %187 = load i32* %scevgep9293, align 4          ; <i32> [#uses=4]
  %188 = add i32 %187, 1236535329                 ; <i32> [#uses=1]
  %189 = add i32 %188, %150                       ; <i32> [#uses=1]
  %190 = add i32 %189, %186                       ; <i32> [#uses=2]
  %191 = lshr i32 %190, 10                        ; <i32> [#uses=1]
  %192 = shl i32 %190, 22                         ; <i32> [#uses=1]
  %193 = or i32 %191, %192                        ; <i32> [#uses=1]
  %194 = add i32 %193, %183                       ; <i32> [#uses=6]
  %195 = xor i32 %194, %183                       ; <i32> [#uses=1]
  %196 = and i32 %195, %172                       ; <i32> [#uses=1]
  %197 = xor i32 %196, %183                       ; <i32> [#uses=1]
  %198 = add i32 %33, -165796510                  ; <i32> [#uses=1]
  %199 = add i32 %198, %161                       ; <i32> [#uses=1]
  %200 = add i32 %199, %197                       ; <i32> [#uses=2]
  %201 = lshr i32 %200, 27                        ; <i32> [#uses=1]
  %202 = shl i32 %200, 5                          ; <i32> [#uses=1]
  %203 = or i32 %201, %202                        ; <i32> [#uses=1]
  %204 = add i32 %203, %194                       ; <i32> [#uses=6]
  %205 = xor i32 %204, %194                       ; <i32> [#uses=1]
  %206 = and i32 %205, %183                       ; <i32> [#uses=1]
  %207 = xor i32 %206, %194                       ; <i32> [#uses=1]
  %208 = add i32 %88, -1069501632                 ; <i32> [#uses=1]
  %209 = add i32 %208, %172                       ; <i32> [#uses=1]
  %210 = add i32 %209, %207                       ; <i32> [#uses=2]
  %211 = lshr i32 %210, 23                        ; <i32> [#uses=1]
  %212 = shl i32 %210, 9                          ; <i32> [#uses=1]
  %213 = or i32 %211, %212                        ; <i32> [#uses=1]
  %214 = add i32 %213, %204                       ; <i32> [#uses=6]
  %215 = xor i32 %214, %204                       ; <i32> [#uses=1]
  %216 = and i32 %215, %194                       ; <i32> [#uses=1]
  %217 = xor i32 %216, %204                       ; <i32> [#uses=1]
  %218 = add i32 %143, 643717713                  ; <i32> [#uses=1]
  %219 = add i32 %218, %183                       ; <i32> [#uses=1]
  %220 = add i32 %219, %217                       ; <i32> [#uses=2]
  %221 = lshr i32 %220, 18                        ; <i32> [#uses=1]
  %222 = shl i32 %220, 14                         ; <i32> [#uses=1]
  %223 = or i32 %221, %222                        ; <i32> [#uses=1]
  %224 = add i32 %223, %214                       ; <i32> [#uses=6]
  %225 = xor i32 %224, %214                       ; <i32> [#uses=1]
  %226 = and i32 %225, %204                       ; <i32> [#uses=1]
  %227 = xor i32 %226, %214                       ; <i32> [#uses=1]
  %228 = add i32 %22, -373897302                  ; <i32> [#uses=1]
  %229 = add i32 %228, %194                       ; <i32> [#uses=1]
  %230 = add i32 %229, %227                       ; <i32> [#uses=2]
  %231 = lshr i32 %230, 12                        ; <i32> [#uses=1]
  %232 = shl i32 %230, 20                         ; <i32> [#uses=1]
  %233 = or i32 %231, %232                        ; <i32> [#uses=1]
  %234 = add i32 %233, %224                       ; <i32> [#uses=6]
  %235 = xor i32 %234, %224                       ; <i32> [#uses=1]
  %236 = and i32 %235, %214                       ; <i32> [#uses=1]
  %237 = xor i32 %236, %224                       ; <i32> [#uses=1]
  %238 = add i32 %77, -701558691                  ; <i32> [#uses=1]
  %239 = add i32 %238, %204                       ; <i32> [#uses=1]
  %240 = add i32 %239, %237                       ; <i32> [#uses=2]
  %241 = lshr i32 %240, 27                        ; <i32> [#uses=1]
  %242 = shl i32 %240, 5                          ; <i32> [#uses=1]
  %243 = or i32 %241, %242                        ; <i32> [#uses=1]
  %244 = add i32 %243, %234                       ; <i32> [#uses=6]
  %245 = xor i32 %244, %234                       ; <i32> [#uses=1]
  %246 = and i32 %245, %224                       ; <i32> [#uses=1]
  %247 = xor i32 %246, %234                       ; <i32> [#uses=1]
  %248 = add i32 %132, 38016083                   ; <i32> [#uses=1]
  %249 = add i32 %248, %214                       ; <i32> [#uses=1]
  %250 = add i32 %249, %247                       ; <i32> [#uses=2]
  %251 = lshr i32 %250, 23                        ; <i32> [#uses=1]
  %252 = shl i32 %250, 9                          ; <i32> [#uses=1]
  %253 = or i32 %251, %252                        ; <i32> [#uses=1]
  %254 = add i32 %253, %244                       ; <i32> [#uses=6]
  %255 = xor i32 %254, %244                       ; <i32> [#uses=1]
  %256 = and i32 %255, %234                       ; <i32> [#uses=1]
  %257 = xor i32 %256, %244                       ; <i32> [#uses=1]
  %258 = add i32 %187, -660478335                 ; <i32> [#uses=1]
  %259 = add i32 %258, %224                       ; <i32> [#uses=1]
  %260 = add i32 %259, %257                       ; <i32> [#uses=2]
  %261 = lshr i32 %260, 18                        ; <i32> [#uses=1]
  %262 = shl i32 %260, 14                         ; <i32> [#uses=1]
  %263 = or i32 %261, %262                        ; <i32> [#uses=1]
  %264 = add i32 %263, %254                       ; <i32> [#uses=6]
  %265 = xor i32 %264, %254                       ; <i32> [#uses=1]
  %266 = and i32 %265, %244                       ; <i32> [#uses=1]
  %267 = xor i32 %266, %254                       ; <i32> [#uses=1]
  %268 = add i32 %66, -405537848                  ; <i32> [#uses=1]
  %269 = add i32 %268, %234                       ; <i32> [#uses=1]
  %270 = add i32 %269, %267                       ; <i32> [#uses=2]
  %271 = lshr i32 %270, 12                        ; <i32> [#uses=1]
  %272 = shl i32 %270, 20                         ; <i32> [#uses=1]
  %273 = or i32 %271, %272                        ; <i32> [#uses=1]
  %274 = add i32 %273, %264                       ; <i32> [#uses=6]
  %275 = xor i32 %274, %264                       ; <i32> [#uses=1]
  %276 = and i32 %275, %254                       ; <i32> [#uses=1]
  %277 = xor i32 %276, %264                       ; <i32> [#uses=1]
  %278 = add i32 %121, 568446438                  ; <i32> [#uses=1]
  %279 = add i32 %278, %244                       ; <i32> [#uses=1]
  %280 = add i32 %279, %277                       ; <i32> [#uses=2]
  %281 = lshr i32 %280, 27                        ; <i32> [#uses=1]
  %282 = shl i32 %280, 5                          ; <i32> [#uses=1]
  %283 = or i32 %281, %282                        ; <i32> [#uses=1]
  %284 = add i32 %283, %274                       ; <i32> [#uses=6]
  %285 = xor i32 %284, %274                       ; <i32> [#uses=1]
  %286 = and i32 %285, %264                       ; <i32> [#uses=1]
  %287 = xor i32 %286, %274                       ; <i32> [#uses=1]
  %288 = add i32 %176, -1019803690                ; <i32> [#uses=1]
  %289 = add i32 %288, %254                       ; <i32> [#uses=1]
  %290 = add i32 %289, %287                       ; <i32> [#uses=2]
  %291 = lshr i32 %290, 23                        ; <i32> [#uses=1]
  %292 = shl i32 %290, 9                          ; <i32> [#uses=1]
  %293 = or i32 %291, %292                        ; <i32> [#uses=1]
  %294 = add i32 %293, %284                       ; <i32> [#uses=6]
  %295 = xor i32 %294, %284                       ; <i32> [#uses=1]
  %296 = and i32 %295, %274                       ; <i32> [#uses=1]
  %297 = xor i32 %296, %284                       ; <i32> [#uses=1]
  %298 = add i32 %55, -187363961                  ; <i32> [#uses=1]
  %299 = add i32 %298, %264                       ; <i32> [#uses=1]
  %300 = add i32 %299, %297                       ; <i32> [#uses=2]
  %301 = lshr i32 %300, 18                        ; <i32> [#uses=1]
  %302 = shl i32 %300, 14                         ; <i32> [#uses=1]
  %303 = or i32 %301, %302                        ; <i32> [#uses=1]
  %304 = add i32 %303, %294                       ; <i32> [#uses=6]
  %305 = xor i32 %304, %294                       ; <i32> [#uses=1]
  %306 = and i32 %305, %284                       ; <i32> [#uses=1]
  %307 = xor i32 %306, %294                       ; <i32> [#uses=1]
  %308 = add i32 %110, 1163531501                 ; <i32> [#uses=1]
  %309 = add i32 %308, %274                       ; <i32> [#uses=1]
  %310 = add i32 %309, %307                       ; <i32> [#uses=2]
  %311 = lshr i32 %310, 12                        ; <i32> [#uses=1]
  %312 = shl i32 %310, 20                         ; <i32> [#uses=1]
  %313 = or i32 %311, %312                        ; <i32> [#uses=1]
  %314 = add i32 %313, %304                       ; <i32> [#uses=6]
  %315 = xor i32 %314, %304                       ; <i32> [#uses=1]
  %316 = and i32 %315, %294                       ; <i32> [#uses=1]
  %317 = xor i32 %316, %304                       ; <i32> [#uses=1]
  %318 = add i32 %165, -1444681467                ; <i32> [#uses=1]
  %319 = add i32 %318, %284                       ; <i32> [#uses=1]
  %320 = add i32 %319, %317                       ; <i32> [#uses=2]
  %321 = lshr i32 %320, 27                        ; <i32> [#uses=1]
  %322 = shl i32 %320, 5                          ; <i32> [#uses=1]
  %323 = or i32 %321, %322                        ; <i32> [#uses=1]
  %324 = add i32 %323, %314                       ; <i32> [#uses=6]
  %325 = xor i32 %324, %314                       ; <i32> [#uses=1]
  %326 = and i32 %325, %304                       ; <i32> [#uses=1]
  %327 = xor i32 %326, %314                       ; <i32> [#uses=1]
  %328 = add i32 %44, -51403784                   ; <i32> [#uses=1]
  %329 = add i32 %328, %294                       ; <i32> [#uses=1]
  %330 = add i32 %329, %327                       ; <i32> [#uses=2]
  %331 = lshr i32 %330, 23                        ; <i32> [#uses=1]
  %332 = shl i32 %330, 9                          ; <i32> [#uses=1]
  %333 = or i32 %331, %332                        ; <i32> [#uses=1]
  %334 = add i32 %333, %324                       ; <i32> [#uses=5]
  %335 = xor i32 %334, %324                       ; <i32> [#uses=1]
  %336 = and i32 %335, %314                       ; <i32> [#uses=1]
  %337 = xor i32 %336, %324                       ; <i32> [#uses=1]
  %338 = add i32 %99, 1735328473                  ; <i32> [#uses=1]
  %339 = add i32 %338, %304                       ; <i32> [#uses=1]
  %340 = add i32 %339, %337                       ; <i32> [#uses=2]
  %341 = lshr i32 %340, 18                        ; <i32> [#uses=1]
  %342 = shl i32 %340, 14                         ; <i32> [#uses=1]
  %343 = or i32 %341, %342                        ; <i32> [#uses=1]
  %344 = add i32 %343, %334                       ; <i32> [#uses=4]
  %345 = xor i32 %344, %334                       ; <i32> [#uses=2]
  %346 = and i32 %345, %324                       ; <i32> [#uses=1]
  %347 = xor i32 %346, %334                       ; <i32> [#uses=1]
  %348 = add i32 %154, -1926607734                ; <i32> [#uses=1]
  %349 = add i32 %348, %314                       ; <i32> [#uses=1]
  %350 = add i32 %349, %347                       ; <i32> [#uses=2]
  %351 = lshr i32 %350, 12                        ; <i32> [#uses=1]
  %352 = shl i32 %350, 20                         ; <i32> [#uses=1]
  %353 = or i32 %351, %352                        ; <i32> [#uses=1]
  %354 = add i32 %353, %344                       ; <i32> [#uses=5]
  %355 = xor i32 %345, %354                       ; <i32> [#uses=1]
  %356 = add i32 %77, -378558                     ; <i32> [#uses=1]
  %357 = add i32 %356, %324                       ; <i32> [#uses=1]
  %358 = add i32 %357, %355                       ; <i32> [#uses=2]
  %359 = lshr i32 %358, 28                        ; <i32> [#uses=1]
  %360 = shl i32 %358, 4                          ; <i32> [#uses=1]
  %361 = or i32 %359, %360                        ; <i32> [#uses=1]
  %362 = add i32 %361, %354                       ; <i32> [#uses=5]
  %363 = xor i32 %354, %344                       ; <i32> [#uses=1]
  %364 = xor i32 %363, %362                       ; <i32> [#uses=1]
  %365 = add i32 %110, -2022574463                ; <i32> [#uses=1]
  %366 = add i32 %365, %334                       ; <i32> [#uses=1]
  %367 = add i32 %366, %364                       ; <i32> [#uses=2]
  %368 = lshr i32 %367, 21                        ; <i32> [#uses=1]
  %369 = shl i32 %367, 11                         ; <i32> [#uses=1]
  %370 = or i32 %368, %369                        ; <i32> [#uses=1]
  %371 = add i32 %370, %362                       ; <i32> [#uses=5]
  %372 = xor i32 %362, %354                       ; <i32> [#uses=1]
  %373 = xor i32 %372, %371                       ; <i32> [#uses=1]
  %374 = add i32 %143, 1839030562                 ; <i32> [#uses=1]
  %375 = add i32 %374, %344                       ; <i32> [#uses=1]
  %376 = add i32 %375, %373                       ; <i32> [#uses=2]
  %377 = lshr i32 %376, 16                        ; <i32> [#uses=1]
  %378 = shl i32 %376, 16                         ; <i32> [#uses=1]
  %379 = or i32 %377, %378                        ; <i32> [#uses=1]
  %380 = add i32 %379, %371                       ; <i32> [#uses=5]
  %381 = xor i32 %371, %362                       ; <i32> [#uses=1]
  %382 = xor i32 %381, %380                       ; <i32> [#uses=1]
  %383 = add i32 %176, -35309556                  ; <i32> [#uses=1]
  %384 = add i32 %383, %354                       ; <i32> [#uses=1]
  %385 = add i32 %384, %382                       ; <i32> [#uses=2]
  %386 = lshr i32 %385, 9                         ; <i32> [#uses=1]
  %387 = shl i32 %385, 23                         ; <i32> [#uses=1]
  %388 = or i32 %386, %387                        ; <i32> [#uses=1]
  %389 = add i32 %388, %380                       ; <i32> [#uses=5]
  %390 = xor i32 %380, %371                       ; <i32> [#uses=1]
  %391 = xor i32 %390, %389                       ; <i32> [#uses=1]
  %392 = add i32 %33, -1530992060                 ; <i32> [#uses=1]
  %393 = add i32 %392, %362                       ; <i32> [#uses=1]
  %394 = add i32 %393, %391                       ; <i32> [#uses=2]
  %395 = lshr i32 %394, 28                        ; <i32> [#uses=1]
  %396 = shl i32 %394, 4                          ; <i32> [#uses=1]
  %397 = or i32 %395, %396                        ; <i32> [#uses=1]
  %398 = add i32 %397, %389                       ; <i32> [#uses=5]
  %399 = xor i32 %389, %380                       ; <i32> [#uses=1]
  %400 = xor i32 %399, %398                       ; <i32> [#uses=1]
  %401 = add i32 %66, 1272893353                  ; <i32> [#uses=1]
  %402 = add i32 %401, %371                       ; <i32> [#uses=1]
  %403 = add i32 %402, %400                       ; <i32> [#uses=2]
  %404 = lshr i32 %403, 21                        ; <i32> [#uses=1]
  %405 = shl i32 %403, 11                         ; <i32> [#uses=1]
  %406 = or i32 %404, %405                        ; <i32> [#uses=1]
  %407 = add i32 %406, %398                       ; <i32> [#uses=5]
  %408 = xor i32 %398, %389                       ; <i32> [#uses=1]
  %409 = xor i32 %408, %407                       ; <i32> [#uses=1]
  %410 = add i32 %99, -155497632                  ; <i32> [#uses=1]
  %411 = add i32 %410, %380                       ; <i32> [#uses=1]
  %412 = add i32 %411, %409                       ; <i32> [#uses=2]
  %413 = lshr i32 %412, 16                        ; <i32> [#uses=1]
  %414 = shl i32 %412, 16                         ; <i32> [#uses=1]
  %415 = or i32 %413, %414                        ; <i32> [#uses=1]
  %416 = add i32 %415, %407                       ; <i32> [#uses=5]
  %417 = xor i32 %407, %398                       ; <i32> [#uses=1]
  %418 = xor i32 %417, %416                       ; <i32> [#uses=1]
  %419 = add i32 %132, -1094730640                ; <i32> [#uses=1]
  %420 = add i32 %419, %389                       ; <i32> [#uses=1]
  %421 = add i32 %420, %418                       ; <i32> [#uses=2]
  %422 = lshr i32 %421, 9                         ; <i32> [#uses=1]
  %423 = shl i32 %421, 23                         ; <i32> [#uses=1]
  %424 = or i32 %422, %423                        ; <i32> [#uses=1]
  %425 = add i32 %424, %416                       ; <i32> [#uses=5]
  %426 = xor i32 %416, %407                       ; <i32> [#uses=1]
  %427 = xor i32 %426, %425                       ; <i32> [#uses=1]
  %428 = add i32 %165, 681279174                  ; <i32> [#uses=1]
  %429 = add i32 %428, %398                       ; <i32> [#uses=1]
  %430 = add i32 %429, %427                       ; <i32> [#uses=2]
  %431 = lshr i32 %430, 28                        ; <i32> [#uses=1]
  %432 = shl i32 %430, 4                          ; <i32> [#uses=1]
  %433 = or i32 %431, %432                        ; <i32> [#uses=1]
  %434 = add i32 %433, %425                       ; <i32> [#uses=5]
  %435 = xor i32 %425, %416                       ; <i32> [#uses=1]
  %436 = xor i32 %435, %434                       ; <i32> [#uses=1]
  %437 = add i32 %22, -358537222                  ; <i32> [#uses=1]
  %438 = add i32 %437, %407                       ; <i32> [#uses=1]
  %439 = add i32 %438, %436                       ; <i32> [#uses=2]
  %440 = lshr i32 %439, 21                        ; <i32> [#uses=1]
  %441 = shl i32 %439, 11                         ; <i32> [#uses=1]
  %442 = or i32 %440, %441                        ; <i32> [#uses=1]
  %443 = add i32 %442, %434                       ; <i32> [#uses=5]
  %444 = xor i32 %434, %425                       ; <i32> [#uses=1]
  %445 = xor i32 %444, %443                       ; <i32> [#uses=1]
  %446 = add i32 %55, -722521979                  ; <i32> [#uses=1]
  %447 = add i32 %446, %416                       ; <i32> [#uses=1]
  %448 = add i32 %447, %445                       ; <i32> [#uses=2]
  %449 = lshr i32 %448, 16                        ; <i32> [#uses=1]
  %450 = shl i32 %448, 16                         ; <i32> [#uses=1]
  %451 = or i32 %449, %450                        ; <i32> [#uses=1]
  %452 = add i32 %451, %443                       ; <i32> [#uses=5]
  %453 = xor i32 %443, %434                       ; <i32> [#uses=1]
  %454 = xor i32 %453, %452                       ; <i32> [#uses=1]
  %455 = add i32 %88, 76029189                    ; <i32> [#uses=1]
  %456 = add i32 %455, %425                       ; <i32> [#uses=1]
  %457 = add i32 %456, %454                       ; <i32> [#uses=2]
  %458 = lshr i32 %457, 9                         ; <i32> [#uses=1]
  %459 = shl i32 %457, 23                         ; <i32> [#uses=1]
  %460 = or i32 %458, %459                        ; <i32> [#uses=1]
  %461 = add i32 %460, %452                       ; <i32> [#uses=5]
  %462 = xor i32 %452, %443                       ; <i32> [#uses=1]
  %463 = xor i32 %462, %461                       ; <i32> [#uses=1]
  %464 = add i32 %121, -640364487                 ; <i32> [#uses=1]
  %465 = add i32 %464, %434                       ; <i32> [#uses=1]
  %466 = add i32 %465, %463                       ; <i32> [#uses=2]
  %467 = lshr i32 %466, 28                        ; <i32> [#uses=1]
  %468 = shl i32 %466, 4                          ; <i32> [#uses=1]
  %469 = or i32 %467, %468                        ; <i32> [#uses=1]
  %470 = add i32 %469, %461                       ; <i32> [#uses=5]
  %471 = xor i32 %461, %452                       ; <i32> [#uses=1]
  %472 = xor i32 %471, %470                       ; <i32> [#uses=1]
  %473 = add i32 %154, -421815835                 ; <i32> [#uses=1]
  %474 = add i32 %473, %443                       ; <i32> [#uses=1]
  %475 = add i32 %474, %472                       ; <i32> [#uses=2]
  %476 = lshr i32 %475, 21                        ; <i32> [#uses=1]
  %477 = shl i32 %475, 11                         ; <i32> [#uses=1]
  %478 = or i32 %476, %477                        ; <i32> [#uses=1]
  %479 = add i32 %478, %470                       ; <i32> [#uses=5]
  %480 = xor i32 %470, %461                       ; <i32> [#uses=1]
  %481 = xor i32 %480, %479                       ; <i32> [#uses=1]
  %482 = add i32 %187, 530742520                  ; <i32> [#uses=1]
  %483 = add i32 %482, %452                       ; <i32> [#uses=1]
  %484 = add i32 %483, %481                       ; <i32> [#uses=2]
  %485 = lshr i32 %484, 16                        ; <i32> [#uses=1]
  %486 = shl i32 %484, 16                         ; <i32> [#uses=1]
  %487 = or i32 %485, %486                        ; <i32> [#uses=1]
  %488 = add i32 %487, %479                       ; <i32> [#uses=5]
  %489 = xor i32 %479, %470                       ; <i32> [#uses=1]
  %490 = xor i32 %489, %488                       ; <i32> [#uses=1]
  %491 = add i32 %44, -995338651                  ; <i32> [#uses=1]
  %492 = add i32 %491, %461                       ; <i32> [#uses=1]
  %493 = add i32 %492, %490                       ; <i32> [#uses=2]
  %494 = lshr i32 %493, 9                         ; <i32> [#uses=1]
  %495 = shl i32 %493, 23                         ; <i32> [#uses=1]
  %496 = or i32 %494, %495                        ; <i32> [#uses=1]
  %497 = add i32 %496, %488                       ; <i32> [#uses=5]
  %not = xor i32 %479, -1                         ; <i32> [#uses=1]
  %498 = or i32 %497, %not                        ; <i32> [#uses=1]
  %499 = xor i32 %498, %488                       ; <i32> [#uses=1]
  %500 = add i32 %22, -198630844                  ; <i32> [#uses=1]
  %501 = add i32 %500, %470                       ; <i32> [#uses=1]
  %502 = add i32 %501, %499                       ; <i32> [#uses=2]
  %503 = lshr i32 %502, 26                        ; <i32> [#uses=1]
  %504 = shl i32 %502, 6                          ; <i32> [#uses=1]
  %505 = or i32 %503, %504                        ; <i32> [#uses=1]
  %506 = add i32 %505, %497                       ; <i32> [#uses=5]
  %not4 = xor i32 %488, -1                        ; <i32> [#uses=1]
  %507 = or i32 %506, %not4                       ; <i32> [#uses=1]
  %508 = xor i32 %507, %497                       ; <i32> [#uses=1]
  %509 = add i32 %99, 1126891415                  ; <i32> [#uses=1]
  %510 = add i32 %509, %479                       ; <i32> [#uses=1]
  %511 = add i32 %510, %508                       ; <i32> [#uses=2]
  %512 = lshr i32 %511, 22                        ; <i32> [#uses=1]
  %513 = shl i32 %511, 10                         ; <i32> [#uses=1]
  %514 = or i32 %512, %513                        ; <i32> [#uses=1]
  %515 = add i32 %514, %506                       ; <i32> [#uses=5]
  %not6 = xor i32 %497, -1                        ; <i32> [#uses=1]
  %516 = or i32 %515, %not6                       ; <i32> [#uses=1]
  %517 = xor i32 %516, %506                       ; <i32> [#uses=1]
  %518 = add i32 %176, -1416354905                ; <i32> [#uses=1]
  %519 = add i32 %518, %488                       ; <i32> [#uses=1]
  %520 = add i32 %519, %517                       ; <i32> [#uses=2]
  %521 = lshr i32 %520, 17                        ; <i32> [#uses=1]
  %522 = shl i32 %520, 15                         ; <i32> [#uses=1]
  %523 = or i32 %521, %522                        ; <i32> [#uses=1]
  %524 = add i32 %523, %515                       ; <i32> [#uses=5]
  %not8 = xor i32 %506, -1                        ; <i32> [#uses=1]
  %525 = or i32 %524, %not8                       ; <i32> [#uses=1]
  %526 = xor i32 %525, %515                       ; <i32> [#uses=1]
  %527 = add i32 %77, -57434055                   ; <i32> [#uses=1]
  %528 = add i32 %527, %497                       ; <i32> [#uses=1]
  %529 = add i32 %528, %526                       ; <i32> [#uses=2]
  %530 = lshr i32 %529, 11                        ; <i32> [#uses=1]
  %531 = shl i32 %529, 21                         ; <i32> [#uses=1]
  %532 = or i32 %530, %531                        ; <i32> [#uses=1]
  %533 = add i32 %532, %524                       ; <i32> [#uses=5]
  %not10 = xor i32 %515, -1                       ; <i32> [#uses=1]
  %534 = or i32 %533, %not10                      ; <i32> [#uses=1]
  %535 = xor i32 %534, %524                       ; <i32> [#uses=1]
  %536 = add i32 %154, 1700485571                 ; <i32> [#uses=1]
  %537 = add i32 %536, %506                       ; <i32> [#uses=1]
  %538 = add i32 %537, %535                       ; <i32> [#uses=2]
  %539 = lshr i32 %538, 26                        ; <i32> [#uses=1]
  %540 = shl i32 %538, 6                          ; <i32> [#uses=1]
  %541 = or i32 %539, %540                        ; <i32> [#uses=1]
  %542 = add i32 %541, %533                       ; <i32> [#uses=5]
  %not12 = xor i32 %524, -1                       ; <i32> [#uses=1]
  %543 = or i32 %542, %not12                      ; <i32> [#uses=1]
  %544 = xor i32 %543, %533                       ; <i32> [#uses=1]
  %545 = add i32 %55, -1894986606                 ; <i32> [#uses=1]
  %546 = add i32 %545, %515                       ; <i32> [#uses=1]
  %547 = add i32 %546, %544                       ; <i32> [#uses=2]
  %548 = lshr i32 %547, 22                        ; <i32> [#uses=1]
  %549 = shl i32 %547, 10                         ; <i32> [#uses=1]
  %550 = or i32 %548, %549                        ; <i32> [#uses=1]
  %551 = add i32 %550, %542                       ; <i32> [#uses=5]
  %not14 = xor i32 %533, -1                       ; <i32> [#uses=1]
  %552 = or i32 %551, %not14                      ; <i32> [#uses=1]
  %553 = xor i32 %552, %542                       ; <i32> [#uses=1]
  %554 = add i32 %132, -1051523                   ; <i32> [#uses=1]
  %555 = add i32 %554, %524                       ; <i32> [#uses=1]
  %556 = add i32 %555, %553                       ; <i32> [#uses=2]
  %557 = lshr i32 %556, 17                        ; <i32> [#uses=1]
  %558 = shl i32 %556, 15                         ; <i32> [#uses=1]
  %559 = or i32 %557, %558                        ; <i32> [#uses=1]
  %560 = add i32 %559, %551                       ; <i32> [#uses=5]
  %not16 = xor i32 %542, -1                       ; <i32> [#uses=1]
  %561 = or i32 %560, %not16                      ; <i32> [#uses=1]
  %562 = xor i32 %561, %551                       ; <i32> [#uses=1]
  %563 = add i32 %33, -2054922799                 ; <i32> [#uses=1]
  %564 = add i32 %563, %533                       ; <i32> [#uses=1]
  %565 = add i32 %564, %562                       ; <i32> [#uses=2]
  %566 = lshr i32 %565, 11                        ; <i32> [#uses=1]
  %567 = shl i32 %565, 21                         ; <i32> [#uses=1]
  %568 = or i32 %566, %567                        ; <i32> [#uses=1]
  %569 = add i32 %568, %560                       ; <i32> [#uses=5]
  %not18 = xor i32 %551, -1                       ; <i32> [#uses=1]
  %570 = or i32 %569, %not18                      ; <i32> [#uses=1]
  %571 = xor i32 %570, %560                       ; <i32> [#uses=1]
  %572 = add i32 %110, 1873313359                 ; <i32> [#uses=1]
  %573 = add i32 %572, %542                       ; <i32> [#uses=1]
  %574 = add i32 %573, %571                       ; <i32> [#uses=2]
  %575 = lshr i32 %574, 26                        ; <i32> [#uses=1]
  %576 = shl i32 %574, 6                          ; <i32> [#uses=1]
  %577 = or i32 %575, %576                        ; <i32> [#uses=1]
  %578 = add i32 %577, %569                       ; <i32> [#uses=5]
  %not20 = xor i32 %560, -1                       ; <i32> [#uses=1]
  %579 = or i32 %578, %not20                      ; <i32> [#uses=1]
  %580 = xor i32 %579, %569                       ; <i32> [#uses=1]
  %581 = add i32 %187, -30611744                  ; <i32> [#uses=1]
  %582 = add i32 %581, %551                       ; <i32> [#uses=1]
  %583 = add i32 %582, %580                       ; <i32> [#uses=2]
  %584 = lshr i32 %583, 22                        ; <i32> [#uses=1]
  %585 = shl i32 %583, 10                         ; <i32> [#uses=1]
  %586 = or i32 %584, %585                        ; <i32> [#uses=1]
  %587 = add i32 %586, %578                       ; <i32> [#uses=5]
  %not22 = xor i32 %569, -1                       ; <i32> [#uses=1]
  %588 = or i32 %587, %not22                      ; <i32> [#uses=1]
  %589 = xor i32 %588, %578                       ; <i32> [#uses=1]
  %590 = add i32 %88, -1560198380                 ; <i32> [#uses=1]
  %591 = add i32 %590, %560                       ; <i32> [#uses=1]
  %592 = add i32 %591, %589                       ; <i32> [#uses=2]
  %593 = lshr i32 %592, 17                        ; <i32> [#uses=1]
  %594 = shl i32 %592, 15                         ; <i32> [#uses=1]
  %595 = or i32 %593, %594                        ; <i32> [#uses=1]
  %596 = add i32 %595, %587                       ; <i32> [#uses=5]
  %not24 = xor i32 %578, -1                       ; <i32> [#uses=1]
  %597 = or i32 %596, %not24                      ; <i32> [#uses=1]
  %598 = xor i32 %597, %587                       ; <i32> [#uses=1]
  %599 = add i32 %165, 1309151649                 ; <i32> [#uses=1]
  %600 = add i32 %599, %569                       ; <i32> [#uses=1]
  %601 = add i32 %600, %598                       ; <i32> [#uses=2]
  %602 = lshr i32 %601, 11                        ; <i32> [#uses=1]
  %603 = shl i32 %601, 21                         ; <i32> [#uses=1]
  %604 = or i32 %602, %603                        ; <i32> [#uses=1]
  %605 = add i32 %604, %596                       ; <i32> [#uses=5]
  %not26 = xor i32 %587, -1                       ; <i32> [#uses=1]
  %606 = or i32 %605, %not26                      ; <i32> [#uses=1]
  %607 = xor i32 %606, %596                       ; <i32> [#uses=1]
  %608 = add i32 %66, -145523070                  ; <i32> [#uses=1]
  %609 = add i32 %608, %578                       ; <i32> [#uses=1]
  %610 = add i32 %609, %607                       ; <i32> [#uses=2]
  %611 = lshr i32 %610, 26                        ; <i32> [#uses=1]
  %612 = shl i32 %610, 6                          ; <i32> [#uses=1]
  %613 = or i32 %611, %612                        ; <i32> [#uses=1]
  %614 = add i32 %613, %605                       ; <i32> [#uses=5]
  %not28 = xor i32 %596, -1                       ; <i32> [#uses=1]
  %615 = or i32 %614, %not28                      ; <i32> [#uses=1]
  %616 = xor i32 %615, %605                       ; <i32> [#uses=1]
  %617 = add i32 %143, -1120210379                ; <i32> [#uses=1]
  %618 = add i32 %617, %587                       ; <i32> [#uses=1]
  %619 = add i32 %618, %616                       ; <i32> [#uses=2]
  %620 = lshr i32 %619, 22                        ; <i32> [#uses=1]
  %621 = shl i32 %619, 10                         ; <i32> [#uses=1]
  %622 = or i32 %620, %621                        ; <i32> [#uses=1]
  %623 = add i32 %622, %614                       ; <i32> [#uses=4]
  %not30 = xor i32 %605, -1                       ; <i32> [#uses=1]
  %624 = or i32 %623, %not30                      ; <i32> [#uses=1]
  %625 = xor i32 %624, %614                       ; <i32> [#uses=1]
  %626 = add i32 %44, 718787259                   ; <i32> [#uses=1]
  %627 = add i32 %626, %596                       ; <i32> [#uses=1]
  %628 = add i32 %627, %625                       ; <i32> [#uses=2]
  %629 = lshr i32 %628, 17                        ; <i32> [#uses=1]
  %630 = shl i32 %628, 15                         ; <i32> [#uses=1]
  %631 = or i32 %629, %630                        ; <i32> [#uses=1]
  %632 = add i32 %631, %623                       ; <i32> [#uses=3]
  %not32 = xor i32 %614, -1                       ; <i32> [#uses=1]
  %633 = or i32 %632, %not32                      ; <i32> [#uses=1]
  %634 = xor i32 %633, %623                       ; <i32> [#uses=1]
  %635 = add i32 %121, -343485551                 ; <i32> [#uses=1]
  %636 = add i32 %635, %605                       ; <i32> [#uses=1]
  %637 = add i32 %636, %634                       ; <i32> [#uses=2]
  %638 = lshr i32 %637, 11                        ; <i32> [#uses=1]
  %639 = shl i32 %637, 21                         ; <i32> [#uses=1]
  %640 = or i32 %638, %639                        ; <i32> [#uses=1]
  %641 = add i32 %614, %A.039                     ; <i32> [#uses=2]
  %642 = add i32 %632, %B.038                     ; <i32> [#uses=1]
  %643 = add i32 %642, %640                       ; <i32> [#uses=2]
  %644 = add i32 %632, %C.037                     ; <i32> [#uses=2]
  %645 = add i32 %623, %D.036                     ; <i32> [#uses=2]
  %tmp94 = add i32 %tmp, 64                       ; <i32> [#uses=1]
  %scevgep95 = getelementptr i8* %buffer, i32 %tmp94 ; <i8*> [#uses=1]
  %scevgep9596 = bitcast i8* %scevgep95 to i32*   ; <i32*> [#uses=1]
  %646 = icmp ult i32* %scevgep9596, %2           ; <i1> [#uses=1]
  %indvar.next = add i32 %indvar, 1               ; <i32> [#uses=1]
  br i1 %646, label %bb1, label %bb35

bb35:                                             ; preds = %bb1, %bb34.preheader
  %A.0.lcssa = phi i32 [ %4, %bb34.preheader ], [ %641, %bb1 ] ; <i32> [#uses=1]
  %B.0.lcssa = phi i32 [ %6, %bb34.preheader ], [ %643, %bb1 ] ; <i32> [#uses=1]
  %C.0.lcssa = phi i32 [ %8, %bb34.preheader ], [ %644, %bb1 ] ; <i32> [#uses=1]
  %D.0.lcssa = phi i32 [ %10, %bb34.preheader ], [ %645, %bb1 ] ; <i32> [#uses=1]
  store i32 %A.0.lcssa, i32* %3, align 4
  store i32 %B.0.lcssa, i32* %5, align 4
  store i32 %C.0.lcssa, i32* %7, align 4
  store i32 %D.0.lcssa, i32* %9, align 4
  ret void
}

define void @md5_process_bytes(i8* %buffer, i32 %len, %struct.md5_ctx* %ctx) nounwind {
entry:
  %0 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 5 ; <i32*> [#uses=7]
  %1 = load i32* %0, align 4                      ; <i32> [#uses=4]
  %2 = icmp eq i32 %1, 0                          ; <i1> [#uses=1]
  br i1 %2, label %bb4, label %bb

bb:                                               ; preds = %entry
  %3 = sub i32 128, %1                            ; <i32> [#uses=2]
  %4 = icmp ule i32 %3, %len                      ; <i1> [#uses=1]
  %min = select i1 %4, i32 %3, i32 %len           ; <i32> [#uses=5]
  %5 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 6 ; <[32 x i32]*> [#uses=1]
  %6 = bitcast [32 x i32]* %5 to i8*              ; <i8*> [#uses=4]
  %7 = getelementptr inbounds i8* %6, i32 %1      ; <i8*> [#uses=1]
  tail call void @llvm.memcpy.i32(i8* %7, i8* %buffer, i32 %min, i32 1)
  %8 = load i32* %0, align 4                      ; <i32> [#uses=1]
  %9 = add i32 %min, %8                           ; <i32> [#uses=3]
  store i32 %9, i32* %0, align 4
  %10 = icmp ugt i32 %9, 64                       ; <i1> [#uses=1]
  br i1 %10, label %bb2, label %bb3

bb2:                                              ; preds = %bb
  %11 = and i32 %9, -64                           ; <i32> [#uses=1]
  tail call void @md5_process_block(i8* %6, i32 %11, %struct.md5_ctx* %ctx) nounwind
  %12 = load i32* %0, align 4                     ; <i32> [#uses=1]
  %13 = and i32 %12, 63                           ; <i32> [#uses=2]
  store i32 %13, i32* %0, align 4
  %14 = add i32 %min, %1                          ; <i32> [#uses=1]
  %15 = and i32 %14, -64                          ; <i32> [#uses=1]
  %16 = getelementptr inbounds i8* %6, i32 %15    ; <i8*> [#uses=1]
  tail call void @llvm.memcpy.i32(i8* %6, i8* %16, i32 %13, i32 1)
  br label %bb3

bb3:                                              ; preds = %bb, %bb2
  %17 = getelementptr inbounds i8* %buffer, i32 %min ; <i8*> [#uses=1]
  %18 = sub i32 %len, %min                        ; <i32> [#uses=1]
  br label %bb4

bb4:                                              ; preds = %entry, %bb3
  %len_addr.0 = phi i32 [ %18, %bb3 ], [ %len, %entry ] ; <i32> [#uses=4]
  %buffer_addr.0 = phi i8* [ %17, %bb3 ], [ %buffer, %entry ] ; <i8*> [#uses=3]
  %19 = icmp ugt i32 %len_addr.0, 63              ; <i1> [#uses=1]
  br i1 %19, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %20 = and i32 %len_addr.0, -64                  ; <i32> [#uses=2]
  tail call void @md5_process_block(i8* %buffer_addr.0, i32 %20, %struct.md5_ctx* %ctx) nounwind
  %21 = getelementptr inbounds i8* %buffer_addr.0, i32 %20 ; <i8*> [#uses=1]
  %22 = and i32 %len_addr.0, 63                   ; <i32> [#uses=1]
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %len_addr.1 = phi i32 [ %22, %bb5 ], [ %len_addr.0, %bb4 ] ; <i32> [#uses=3]
  %buffer_addr.1 = phi i8* [ %21, %bb5 ], [ %buffer_addr.0, %bb4 ] ; <i8*> [#uses=1]
  %23 = icmp eq i32 %len_addr.1, 0                ; <i1> [#uses=1]
  br i1 %23, label %return, label %bb7

bb7:                                              ; preds = %bb6
  %24 = load i32* %0, align 4                     ; <i32> [#uses=2]
  %25 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 6 ; <[32 x i32]*> [#uses=1]
  %26 = bitcast [32 x i32]* %25 to i8*            ; <i8*> [#uses=3]
  %27 = getelementptr inbounds i8* %26, i32 %24   ; <i8*> [#uses=1]
  tail call void @llvm.memcpy.i32(i8* %27, i8* %buffer_addr.1, i32 %len_addr.1, i32 1)
  %28 = add i32 %24, %len_addr.1                  ; <i32> [#uses=3]
  %29 = icmp ugt i32 %28, 63                      ; <i1> [#uses=1]
  br i1 %29, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  tail call void @md5_process_block(i8* %26, i32 64, %struct.md5_ctx* %ctx) nounwind
  %30 = add i32 %28, -64                          ; <i32> [#uses=2]
  %31 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 6, i32 16 ; <i32*> [#uses=1]
  %32 = bitcast i32* %31 to i8*                   ; <i8*> [#uses=1]
  tail call void @llvm.memcpy.i32(i8* %26, i8* %32, i32 %30, i32 4)
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  %left_over.0 = phi i32 [ %30, %bb8 ], [ %28, %bb7 ] ; <i32> [#uses=1]
  store i32 %left_over.0, i32* %0, align 4
  ret void

return:                                           ; preds = %bb6
  ret void
}

declare void @llvm.memcpy.i32(i8* nocapture, i8* nocapture, i32, i32) nounwind

define internal fastcc void @set_uint32(i8* nocapture %cp, i32 %v) nounwind {
entry:
  %cp3 = bitcast i8* %cp to i32*                  ; <i32*> [#uses=1]
  store i32 %v, i32* %cp3, align 1
  ret void
}

define i8* @md5_read_ctx(%struct.md5_ctx* nocapture %ctx, i8* %resbuf) nounwind {
entry:
  %0 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 0 ; <i32*> [#uses=1]
  %1 = load i32* %0, align 4                      ; <i32> [#uses=1]
  tail call fastcc void @set_uint32(i8* %resbuf, i32 %1) nounwind
  %2 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 1 ; <i32*> [#uses=1]
  %3 = load i32* %2, align 4                      ; <i32> [#uses=1]
  %4 = getelementptr inbounds i8* %resbuf, i32 4  ; <i8*> [#uses=1]
  tail call fastcc void @set_uint32(i8* %4, i32 %3) nounwind
  %5 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 2 ; <i32*> [#uses=1]
  %6 = load i32* %5, align 4                      ; <i32> [#uses=1]
  %7 = getelementptr inbounds i8* %resbuf, i32 8  ; <i8*> [#uses=1]
  tail call fastcc void @set_uint32(i8* %7, i32 %6) nounwind
  %8 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 3 ; <i32*> [#uses=1]
  %9 = load i32* %8, align 4                      ; <i32> [#uses=1]
  %10 = getelementptr inbounds i8* %resbuf, i32 12 ; <i8*> [#uses=1]
  tail call fastcc void @set_uint32(i8* %10, i32 %9) nounwind
  ret i8* %resbuf
}

define i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %resbuf) nounwind {
entry:
  %0 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 5 ; <i32*> [#uses=1]
  %1 = load i32* %0, align 4                      ; <i32> [#uses=5]
  %2 = icmp ugt i32 %1, 55                        ; <i1> [#uses=1]
  %iftmp.24.0 = select i1 %2, i32 32, i32 16      ; <i32> [#uses=3]
  %3 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 0 ; <i32*> [#uses=2]
  %4 = load i32* %3, align 4                      ; <i32> [#uses=1]
  %5 = add i32 %4, %1                             ; <i32> [#uses=4]
  store i32 %5, i32* %3, align 4
  %6 = icmp ult i32 %5, %1                        ; <i1> [#uses=1]
  br i1 %6, label %bb3, label %bb4

bb3:                                              ; preds = %entry
  %7 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 1 ; <i32*> [#uses=2]
  %8 = load i32* %7, align 4                      ; <i32> [#uses=1]
  %9 = add i32 %8, 1                              ; <i32> [#uses=1]
  store i32 %9, i32* %7, align 4
  br label %bb4

bb4:                                              ; preds = %entry, %bb3
  %10 = add i32 %iftmp.24.0, -2                   ; <i32> [#uses=1]
  %11 = shl i32 %5, 3                             ; <i32> [#uses=1]
  %12 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 6, i32 %10 ; <i32*> [#uses=1]
  store i32 %11, i32* %12, align 4
  %13 = add i32 %iftmp.24.0, -1                   ; <i32> [#uses=1]
  %14 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 4, i32 1 ; <i32*> [#uses=1]
  %15 = load i32* %14, align 4                    ; <i32> [#uses=1]
  %16 = shl i32 %15, 3                            ; <i32> [#uses=1]
  %17 = lshr i32 %5, 29                           ; <i32> [#uses=1]
  %18 = or i32 %17, %16                           ; <i32> [#uses=1]
  %19 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 6, i32 %13 ; <i32*> [#uses=1]
  store i32 %18, i32* %19, align 4
  %20 = shl i32 %iftmp.24.0, 2                    ; <i32> [#uses=2]
  %sum = add i32 %1, 8                            ; <i32> [#uses=1]
  %21 = sub i32 %20, %sum                         ; <i32> [#uses=1]
  %22 = getelementptr inbounds %struct.md5_ctx* %ctx, i32 0, i32 6 ; <[32 x i32]*> [#uses=1]
  %23 = bitcast [32 x i32]* %22 to i8*            ; <i8*> [#uses=2]
  %24 = getelementptr inbounds i8* %23, i32 %1    ; <i8*> [#uses=1]
  tail call void @llvm.memcpy.i32(i8* %24, i8* getelementptr inbounds ([64 x i8]* @fillbuf, i32 0, i32 0), i32 %21, i32 1)
  tail call void @md5_process_block(i8* %23, i32 %20, %struct.md5_ctx* %ctx) nounwind
  %25 = tail call i8* @md5_read_ctx(%struct.md5_ctx* %ctx, i8* %resbuf) nounwind ; <i8*> [#uses=0]
  ret i8* %resbuf
}

define i32 @main(i32 %argc, i8** nocapture %argv) nounwind {
entry:
  %result = alloca [16 x i8], align 1             ; <[16 x i8]*> [#uses=2]
  %ctx = alloca %struct.md5_ctx, align 8          ; <%struct.md5_ctx*> [#uses=3]
  %buffer = alloca [1000 x i8], align 1           ; <[1000 x i8]*> [#uses=2]
  %0 = call i32 (i8*, ...)* @"\01__isoc99_scanf"(i8* noalias getelementptr inbounds ([7 x i8]* @.str, i32 0, i32 0), [1000 x i8]* %buffer) nounwind ; <i32> [#uses=0]
  call void @md5_init_ctx(%struct.md5_ctx* %ctx) nounwind
  %buffer2 = getelementptr inbounds [1000 x i8]* %buffer, i32 0, i32 0 ; <i8*> [#uses=2]
  %1 = call i32 @strlen(i8* %buffer2) nounwind readonly ; <i32> [#uses=1]
  call void @md5_process_bytes(i8* %buffer2, i32 %1, %struct.md5_ctx* %ctx) nounwind
  %result4 = getelementptr inbounds [16 x i8]* %result, i32 0, i32 0 ; <i8*> [#uses=1]
  %2 = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %result4) nounwind ; <i8*> [#uses=0]
  br label %bb

bb:                                               ; preds = %bb, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %6, %bb ]      ; <i32> [#uses=2]
  %scevgep = getelementptr [16 x i8]* %result, i32 0, i32 %i.08 ; <i8*> [#uses=1]
  %3 = load i8* %scevgep, align 1                 ; <i8> [#uses=1]
  %4 = zext i8 %3 to i32                          ; <i32> [#uses=1]
  %5 = call i32 (i8*, ...)* @printf(i8* noalias getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 %4) nounwind ; <i32> [#uses=0]
  %6 = add nsw i32 %i.08, 1                       ; <i32> [#uses=2]
  %exitcond = icmp eq i32 %6, 16                  ; <i1> [#uses=1]
  br i1 %exitcond, label %bb6, label %bb

bb6:                                              ; preds = %bb
  %7 = call i32 @putchar(i32 10) nounwind         ; <i32> [#uses=0]
  ret i32 0
}

declare i32 @"\01__isoc99_scanf"(i8* nocapture, ...) nounwind

declare i32 @strlen(i8* nocapture) nounwind readonly

declare i32 @printf(i8* nocapture, ...) nounwind

declare i32 @putchar(i32) nounwind

define i8* @md5_buffer(i8* %buffer, i32 %len, i8* %resblock) nounwind {
entry:
  %ctx = alloca %struct.md5_ctx, align 8          ; <%struct.md5_ctx*> [#uses=3]
  call void @md5_init_ctx(%struct.md5_ctx* %ctx) nounwind
  call void @md5_process_bytes(i8* %buffer, i32 %len, %struct.md5_ctx* %ctx) nounwind
  %0 = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %resblock) nounwind ; <i8*> [#uses=0]
  ret i8* %resblock
}

define i32 @md5_stream(%struct.FILE* nocapture %stream, i8* %resblock) nounwind {
entry:
  %ctx = alloca %struct.md5_ctx, align 8          ; <%struct.md5_ctx*> [#uses=4]
  %0 = malloc [32840 x i8]                        ; <[32840 x i8]*> [#uses=5]
  %.sub = getelementptr inbounds [32840 x i8]* %0, i32 0, i32 0 ; <i8*> [#uses=2]
  %1 = icmp eq [32840 x i8]* %0, null             ; <i1> [#uses=1]
  br i1 %1, label %bb11, label %bb1

bb1:                                              ; preds = %entry
  call void @md5_init_ctx(%struct.md5_ctx* %ctx) nounwind
  br label %bb3

bb3:                                              ; preds = %bb8, %bb7, %bb1
  %sum.0 = phi i32 [ 0, %bb1 ], [ 0, %bb8 ], [ %5, %bb7 ] ; <i32> [#uses=3]
  %2 = sub i32 32768, %sum.0                      ; <i32> [#uses=1]
  %3 = getelementptr inbounds [32840 x i8]* %0, i32 0, i32 %sum.0 ; <i8*> [#uses=1]
  %4 = call i32 @fread(i8* noalias %3, i32 1, i32 %2, %struct.FILE* noalias %stream) nounwind ; <i32> [#uses=2]
  %5 = add i32 %4, %sum.0                         ; <i32> [#uses=4]
  %6 = icmp eq i32 %5, 32768                      ; <i1> [#uses=1]
  br i1 %6, label %bb8, label %bb4

bb4:                                              ; preds = %bb3
  %7 = icmp eq i32 %4, 0                          ; <i1> [#uses=1]
  br i1 %7, label %bb5, label %bb7

bb5:                                              ; preds = %bb4
  %8 = call i32 @ferror(%struct.FILE* %stream) nounwind ; <i32> [#uses=1]
  %9 = icmp eq i32 %8, 0                          ; <i1> [#uses=1]
  br i1 %9, label %process_partial_block, label %bb6

bb6:                                              ; preds = %bb5
  free [32840 x i8]* %0
  ret i32 1

bb7:                                              ; preds = %bb4
  %10 = call i32 @feof(%struct.FILE* %stream) nounwind ; <i32> [#uses=1]
  %11 = icmp eq i32 %10, 0                        ; <i1> [#uses=1]
  br i1 %11, label %bb3, label %process_partial_block

bb8:                                              ; preds = %bb3
  call void @md5_process_block(i8* %.sub, i32 32768, %struct.md5_ctx* %ctx) nounwind
  br label %bb3

process_partial_block:                            ; preds = %bb7, %bb5
  %12 = icmp eq i32 %5, 0                         ; <i1> [#uses=1]
  br i1 %12, label %bb10, label %bb9

bb9:                                              ; preds = %process_partial_block
  call void @md5_process_bytes(i8* %.sub, i32 %5, %struct.md5_ctx* %ctx) nounwind
  br label %bb10

bb10:                                             ; preds = %process_partial_block, %bb9
  %13 = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %resblock) nounwind ; <i8*> [#uses=0]
  free [32840 x i8]* %0
  ret i32 0

bb11:                                             ; preds = %entry
  ret i32 1
}

declare i32 @fread(i8* noalias nocapture, i32, i32, %struct.FILE* noalias nocapture) nounwind

declare i32 @ferror(%struct.FILE* nocapture) nounwind readonly

declare i32 @feof(%struct.FILE* nocapture) nounwind
